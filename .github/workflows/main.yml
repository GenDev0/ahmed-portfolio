name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: devgen # Replace with your Sentry organization slug
      SENTRY_PROJECT: javascript-nextjs # Replace with your Sentry project slug

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa_global
          chmod 600 ~/.ssh/id_rsa_global
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: ssh -i ~/.ssh/id_rsa_global ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful!'"

      - name: Install Sentry CLI
        run: curl -sL https://sentry.io/get-cli/ | bash

      - name: Create Sentry Release
        run: |
          RELEASE_VERSION=$(git rev-parse --short HEAD)
          echo "Creating Sentry release $RELEASE_VERSION"

          sentry-cli releases new "$RELEASE_VERSION"
          sentry-cli releases set-commits --auto "$RELEASE_VERSION"
          sentry-cli releases finalize "$RELEASE_VERSION"

      - name: Deploy to VPS
        run: |
          ssh -o ConnectTimeout=60 -i ~/.ssh/id_rsa_global ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e

            # Navigate to the project directory
            cd ~/shared_vps/projects/ahmed-portfolio

            # Pull the latest changes
            git checkout main
            git pull origin main

            # Check if the container is running
            if [ "$(docker ps -q -f name=ahmed-portfolio-frontend)" ]; then
              echo "ahmed-portfolio-frontend container exists. Scaling up for zero-downtime deployment."

              # Scale up to 2 instances
              docker compose -f docker-compose.prod.yml up --scale ahmed-portfolio-frontend=2 -d --build

              # Wait for the new container to be healthy
              echo "Waiting for the new container instance to be healthy..."
              until [ "$(docker inspect -f '{{.State.Health.Status}}' $(docker ps -q -f name=ahmed-portfolio-frontend | tail -n 1))" == "healthy" ]; do
                echo "Current health status: $(docker inspect -f '{{.State.Health.Status}}' $(docker ps -q -f name=ahmed-portfolio-frontend | tail -n 1))"
                sleep 5
              done

              # Remove the old instance
              echo "Stopping and removing the old container instance..."
              docker compose -f docker-compose.prod.yml up --scale ahmed-portfolio-frontend=1 -d --build

              # Clean up unused Docker images
              docker image prune -a -f
              docker builder prune --all -f
              
              echo "Deployment complete with zero downtime."
            else
              echo "No running ahmed-portfolio-frontend container found. Deploying for the first time."

              # Deploy the initial version
              docker compose -f docker-compose.prod.yml up -d --build ahmed-portfolio-frontend
            fi
          EOF
